# .github/workflows/shared-ci-get-pull-request-info.yml
name: Get Pull Request Info

on:
  workflow_call:
    inputs:
      pr_number:
        description: "Pull request number"
        required: true
        type: number
      comment_body:
        description: "Issue comment body"
        required: true
        type: string

    outputs:
      command:
        description: "Parsed command from comment"
        value: ${{ jobs.get_pr_info.outputs.command }}
      base_ref:
        description: "Base branch reference"
        value: ${{ jobs.get_pr_info.outputs.base_ref }}
      head_sha:
        description: "Head commit SHA"
        value: ${{ jobs.get_pr_info.outputs.head_sha }}
      changed_files:
        description: "List of changed files"
        value: ${{ jobs.get_changed_files.outputs.all_changed_files }}

env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  get_pr_info:
    runs-on: ubuntu-latest
    outputs:
      command: ${{ steps.check-content.outputs.COMMAND }}
      base_ref: ${{ steps.get_pr_info.outputs.BASE_REF }}
      base_sha: ${{ steps.get_pr_info.outputs.BASE_SHA }}
      head_sha: ${{ steps.get_pr_info.outputs.HEAD_SHA }}
    steps:
      - name: Check if content is valid
        id: check-content
        run: |
          comment_body="${{ inputs.comment_body }}"

          # Parse command type with strict matching
          if [[ "$comment_body" == "iac terraform plan" ]]; then
              command="terraform plan"
          elif [[ "$comment_body" == "iac terraform apply" ]]; then
              command="terraform apply"
          else
              echo "Error: Invalid command format. Expected 'iac terraform plan' or 'iac terraform apply'"
              echo "Received: $comment_body"
              exit 1
          fi
           echo "COMMAND=$command" >> $GITHUB_OUTPUT

      - name: Get PR info
        id: get_pr_info
        run: |
          pr_number="${{ inputs.pr_number }}"
          echo "Fetching PR information for PR #$pr_number"
          response=$(curl -s -H "Authorization: token ${GITHUB_TOKEN}" \
            "https://api.github.com/repos/${{ github.repository }}/pulls/$pr_number")

          mergeable=$(echo $response | jq -r '.mergeable')
          if [ "$mergeable" != "true" ]; then
              echo "Error: The PR is not mergeable (mergeable: $mergeable)"
              echo "Please resolve conflicts and ensure the PR is ready for merge"
              exit 1
          fi

          head_sha=$(echo "$response" | jq -r '.head.sha')
          if [ -z "$head_sha" ] || [ "$head_sha" == "null" ]; then
              echo "Error: Invalid or missing head_sha in PR response"
              exit 1
          fi

          base_ref=$(echo "$response" | jq -r '.base.ref')
          base_sha=$(echo "$response" | jq -r '.base.sha')
          if [ -z "$base_ref" ] || [ "$base_ref" == "null" ]; then
              echo "Error: Invalid or missing base_ref in PR response"
              exit 1
          fi
          if [ -z "$base_sha" ] || [ "$base_sha" == "null" ]; then
              echo "Error: Invalid or missing base_sha in PR response"
              exit 1
          fi

          echo "PR Info - Number: $pr_number, Commit: $head_sha, Base: $base_ref ($base_sha)"

          echo "HEAD_SHA=$head_sha" >> $GITHUB_OUTPUT
          echo "BASE_REF=$base_ref" >> $GITHUB_OUTPUT
          echo "BASE_SHA=$base_sha" >> $GITHUB_OUTPUT

  get_changed_files:
    needs: get_pr_info
    runs-on: ubuntu-latest
    outputs:
      all_changed_files: ${{ steps.changed-files.outputs.all_changed_files }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.get_pr_info.outputs.head_sha }}

      - name: Get changed files
        id: changed-files
        uses: tj-actions/changed-files@v46
        with:
          sha: ${{ needs.get_pr_info.outputs.head_sha }}
          base_sha: ${{ needs.get_pr_info.outputs.base_sha }}
          separator: ","
          files: |
            **/*.yaml
            **/*.tf
